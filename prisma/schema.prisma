generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  role             UserRole            @default(USER)
  churchId         String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  avatar           String?
  bio              String?
  department       String?
  position         String?
  availability     Availability[]
  notifications    Notification[]
  services         ServiceAssignment[]
  swapRequestsFrom SwapRequest[]       @relation("SwapRequestFrom")
  swapRequestsTo   SwapRequest[]       @relation("SwapRequestTo")
  church           Church?             @relation(fields: [churchId], references: [id])

  @@map("users")
}

model Church {
  id        String    @id @default(cuid())
  name      String    @unique
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
  users     User[]

  @@map("churches")
}

model Service {
  id             String              @id @default(cuid())
  title          String
  description    String?
  date           DateTime
  time           String
  location       String
  status         ServiceStatus       @default(DRAFT)
  churchId       String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  availabilities Availability[]
  assignments    ServiceAssignment[]
  church         Church              @relation(fields: [churchId], references: [id])
  swapRequests   SwapRequest[]

  @@map("services")
}

model ServiceAssignment {
  id            String           @id @default(cuid())
  serviceId      String
  userId        String
  role          String
  status        AssignmentStatus @default(PENDING)
  declineReason String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  service       Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([serviceId, userId])
  @@map("service_assignments")
}

model ServiceRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?  @default("#3B82F6")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("service_roles")
}

model Availability {
  id        String             @id @default(cuid())
  userId    String
  date      DateTime
  startTime String?
  endTime   String?
  status    AvailabilityStatus @default(AVAILABLE)
  notes     String?
  serviceId String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service?           @relation(fields: [serviceId], references: [id])

  @@unique([userId, date])
  @@map("availability")
}

model SwapRequest {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  serviceId  String
  date       DateTime
  message    String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation("SwapRequestFrom", fields: [fromUserId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  toUser     User     @relation("SwapRequestTo", fields: [toUserId], references: [id])

  @@map("swap_requests")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  ADMIN
  USER
}

enum ServiceStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum AssignmentStatus {
  PENDING
  CONFIRMED
  DECLINED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  BUSY
}
